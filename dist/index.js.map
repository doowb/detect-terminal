{"version":3,"sources":["../index.ts"],"sourcesContent":["import { execSync } from 'child_process';\n\n/**\n * Attempt to detect the terminal using environment variables.\n */\n\nexport const detectFromEnv = (): string | null => {\n  // Check popular env vars in order of reliability/usefulness\n  const termProgram = process.env.TERM_PROGRAM?.trim()?.toLowerCase();\n\n  if (termProgram) {\n    switch (termProgram) {\n      case 'apple_terminal': return 'terminal';\n      case 'eterm': return 'eterm';\n      case 'gnome-terminal': return 'gnome_terminal';\n      case 'gnome-terminal-server': return 'gnome_terminal';\n      case 'hyper': return 'hyper';\n      case 'iterm.app': return 'iterm';\n      case 'iterm': return 'iterm';\n      case 'iterm2': return 'iterm';\n      case 'konsole': return 'konsole';\n      case 'mate-terminal': return 'mate_terminal';\n      case 'powershell': return 'powershell';\n      case 'putty': return 'putty';\n      case 'qterminal': return 'qterminal';\n      case 'rxvt': return 'rxvt';\n      case 'terminal.app': return 'terminal_app';\n      case 'terminator': return 'terminator';\n      case 'termux': return 'termux';\n      case 'vscode': return 'vscode';\n      case 'warp': return 'warp';\n      case 'wezterm': return 'wezterm';\n      case 'xfce4-terminal': return 'xfce4_terminal';\n      case 'alacritty': return 'alacritty';\n      default: break;\n    }\n    // Unrecognized: sanitize to a string identifier\n    return termProgram.replace(/[^a-z0-9]+/g, '_');\n  }\n\n  // Check for VSCode environment (alternative detection)\n  if (\n    typeof process.env.VSCODE_PID !== 'undefined' ||\n    typeof process.env.TERM_PROGRAM_VERSION !== 'undefined' && /vscode/i.test(process.env.TERM_PROGRAM_VERSION)\n  ) {\n    return 'vscode';\n  }\n\n  // Fallback: $TERM variable (common in UNIX)\n  const term = process.env.TERM?.trim()?.toLowerCase();\n  if (term && term !== 'unknown') {\n    // Attempt to match known terminals.\n    // (This list can be expanded as needed)\n    if (/xterm|xterm-256color/.test(term)) return 'xterm';\n    if (/screen/.test(term)) return 'screen';\n    if (/tmux/.test(term)) return 'tmux';\n    if (/rxvt/.test(term)) return 'rxvt';\n    if (/vt100/.test(term)) return 'vt100';\n    if (/linux/.test(term)) return 'linux_console';\n    if (/alacritty/.test(term)) return 'alacritty';\n    if (/dopamine/.test(term)) return 'dopamine';\n    // Fallback: sanitize TERM value\n    return term.replace(/[^a-z0-9]+/g, '_');\n  }\n\n  // Check COLORTERM (might be indicative)\n  const colorTerm = process.env.COLORTERM?.trim()?.toLowerCase();\n  if (colorTerm === 'truecolor' || colorTerm === '24bit') {\n    return 'truecolor_terminal';\n  }\n\n  return null;\n};\n\n/**\n * Attempt to detect the terminal using the $TERM variable via shell,\n * fallback: only if absolutely needed.\n */\n\nexport const detectFromShell = (): string | null => {\n  // Only for environments where process.env.TERM is missing/unusable.\n  try {\n    const isWindows = process.platform === 'win32';\n    if (isWindows) {\n      const shell = process.env.COMSPEC || '';\n      if (/powershell/i.test(shell)) return 'powershell';\n      if (/cmd\\.exe/i.test(shell)) return 'cmd';\n      if (/wt\\.exe/i.test(shell)) return 'windows_terminal';\n      if (/conhost\\.exe/i.test(shell)) return 'conhost';\n      // Try checking for Windows Terminal via environment\n      if (process.env.WT_SESSION) return 'windows_terminal';\n      return 'windows_cmd';\n    } else {\n      // For Unix: check $TERM from shell as a last resort (rarely needed now)\n      const terminal = execSync('echo $TERM', { encoding: 'utf8' }).trim().toLowerCase();\n      return terminal?.replace(/[^a-z0-9]+/g, '_') || null;\n    }\n  } catch {\n    return null;\n  }\n};\n\n/**\n * Attempt to detect the shell/terminal from the process title.\n */\n\nexport const detectFromProcessTitle = (): string | null => {\n  const processTitle = process.title?.toLowerCase() ?? '';\n\n  // Shell names\n  if (/bash/.test(processTitle)) return 'bash';\n  if (/zsh/.test(processTitle)) return 'zsh';\n  if (/ksh/.test(processTitle)) return 'ksh';\n  if (/fish/.test(processTitle)) return 'fish';\n  if (/csh/.test(processTitle)) return 'csh';\n  if (/tcsh/.test(processTitle)) return 'tcsh';\n  if (/pwsh/.test(processTitle)) return 'powershell';\n  if (/powershell/.test(processTitle)) return 'powershell';\n  if (/cmd/.test(processTitle)) return 'cmd';\n  if (/sh/.test(processTitle)) return 'sh';\n  // \"node\" is not a terminal, but could happen\n  if (/node/.test(processTitle)) return 'node';\n\n  return null;\n};\n\n/**\n * Heuristic to detect terminal as reliably as possible, with wide support.\n */\n\nexport const detectTerminal = (): string => {\n  let terminal = detectFromEnv();\n  if (!terminal) {\n    terminal = detectFromShell();\n  }\n  if (!terminal) {\n    terminal = detectFromProcessTitle();\n  }\n  return terminal || 'unknown';\n};\n\nexport default detectTerminal;\n"],"mappings":"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","names":[]}